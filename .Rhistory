str(ratings)
str(basics)
# Convert columns stored as character to numeric for easier analysis
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
str(ratings)
str(basics)
# Convert columns stored as character to numeric for easier analysis
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
library(dplyr)
library(readr)
library(fs)
library(data.table)
library(R.utils)
library(stringr)
# Set up base URL and file list
base_url <- "https://datasets.imdbws.com/"   # Base URL for IMDb datasets
files <- c("title.basics.tsv.gz", "title.ratings.tsv.gz") # The two datasets we want to download
# Set up output directory
out_dir <- "data/imdb" # Folder to store the downloaded files
dir_create(out_dir) # Create the directory if it doesn't already exist
# Download IMDb files if not already present locally ---
for (f in files) {
dest <- file.path(out_dir, f)  # Full local path for each file
if (!file_exists(dest)) {  # Only download if file is missing
download.file(paste0(base_url, f), # Construct the full URL
destfile = dest,  # Where to save it locally
mode = "wb", # Write in binary mode (important for .gz files)
quiet = TRUE) # Suppress download messages
}
}
basics   <- fread(file.path(out_dir, "title.basics.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
ratings  <- fread(file.path(out_dir, "title.ratings.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
str(ratings)
str(basics)
# Convert columns stored as character to numeric for easier analysis
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
basics <- basics %>% select(tconst, # Unique title identifier (key for merging)
titleType,  # Type of the title (movie, short, tvSeries, etc.)
primaryTitle, # Main title
startYear,  # Release year
runtimeMinutes, # Duration in minutes
genres # List of genres
)%>% filter(titleType =="movie", # Keep only feature films
startYear >= 2011, startYear <= 2020)
sum(is.na(basics$runtimeMinutes))
mean(is.na(basics$runtimeMinutes))
basics$runtime_missing <- is.na(basics$runtimeMinutes)
table(basics$runtime_missing)
library(ggplot2)
library(forcats)
library(tidyr)
basics_long <- basics %>%
separate_rows(genres, sep = ",") %>%
mutate(runtime_missing = is.na(runtimeMinutes))
basics_long <- basics_long %>%
mutate(genres = fct_lump(genres, n = 10))
# Merge basics and ratings datasets on the common key "tconst"
merged_df <- merge(basics, ratings, by = "tconst")
merged_df$runtime_missing <- is.na(merged_df$runtimeMinutes)
View(merged_df)
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy") |
str_detect(genres, "Action") |
str_detect(genres, "Adventure")) %>%
filter(runtimeMinutes >= 30) %>%              # Keep NA runtimes, exclude very short films
filter(!is.na(numVotes) & numVotes >= 50)    # Exclude NAs and films with few votes
View(merged_df)
sum(is.na(merged_df$runtimeMinutes))
git status
library(dplyr)
library(readr)
library(fs)
library(data.table)
library(R.utils)
library(stringr)
library(tinytex)
library(ggplot2)
library(forcats)
library(tidyr)
base_url <- "https://datasets.imdbws.com/"                 # Base URL for IMDb datasets
files <- c("title.basics.tsv.gz", "title.ratings.tsv.gz")  # The two datasets we want to download
# Set up output directory
out_dir <- "data/imdb"              # Folder to store the downloaded files
dir_create(out_dir)                 # Create the directory if it doesn't already exist
# Download IMDb files if not already present locally
for (f in files) {
dest <- file.path(out_dir, f)           # Full local path for each file
if (!file_exists(dest)) {               # Only download if file is missing
download.file(paste0(base_url, f),    # Construct the full URL
destfile = dest,                      # Where to save it locally
mode = "wb",                          # Write in binary mode (important for .gz files)
quiet = TRUE)                         # Suppress download messages
}
}
basics   <- fread(file.path(out_dir, "title.basics.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
ratings  <- fread(file.path(out_dir, "title.ratings.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
str(ratings)
str(basics)
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
basics <- basics %>%
select(
tconst,           # Unique title identifier (key for merging)
titleType,        # Type of the title (movie, short, tvSeries, etc.)
primaryTitle,     # Main title
startYear,        # Release year
runtimeMinutes,   # Duration in minutes
genres            # List of genres
) %>%
filter(
titleType == "movie",          # Keep only feature films
startYear >= 2011,             # Released from 2011 onwards
startYear <= 2020              # Up to 2020
)
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy") |
str_detect(genres, "Action") |
str_detect(genres, "Adventure")) %>%
filter(runtimeMinutes >= 30) %>%             # Keep NA runtimes, exclude very short films
filter(numVotes >= 50)
merged_df <- merge(basics, ratings, by = "tconst")
merged_df$runtime_missing <- is.na(merged_df$runtimeMinutes)
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy") |
str_detect(genres, "Action") |
str_detect(genres, "Adventure")) %>%
filter(runtimeMinutes >= 30) %>%             # Keep NA runtimes, exclude very short films
filter(numVotes >= 50)
View(merged_df)
sum(merged_df$runtime_missing)
merged_df <- merge(basics, ratings, by = "tconst")
merged_df$runtime_missing <- is.na(merged_df$runtimeMinutes)
View(merged_df)
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy") |
str_detect(genres, "Action") |
str_detect(genres, "Adventure")) %>%
filter(is.na(runtimeMinutes) |
runtimeMinutes >= 30) %>%           # Keep NA runtimes, exclude very short films
filter(numVotes >= 50)
merged_df <- merged_df %>%
mutate(
year_group = case_when(
startYear >= 2011 & startYear <= 2015 ~ "2011-2015",
startYear >= 2016 & startYear <= 2020 ~ "2016-2020"
)
) %>%
group_by(genres, year_group) %>%
mutate(runtimeMinutes = if_else(
is.na(runtimeMinutes),
median(runtimeMinutes, na.rm = TRUE),
runtimeMinutes
)) %>%
ungroup()
View(merged_df)
install.packages("dplyr")
install.packages("readr")
install.packages("fs")
install.packages("data.table")
install.packages("R.utils")
install.packages("stringr")
install.packages("ggplot2")
install.packages("forcats")
install.packages("tidyr")
install.packages("tinytex")
library(dplyr)
library(readr)
library(fs)
library(data.table)
library(R.utils)
library(stringr)
library(tinytex)
library(ggplot2)
library(forcats)
library(tidyr)
###DATA PULLING SCRIPT
base_url <- "https://datasets.imdbws.com/"                 # Base URL for IMDb datasets
files <- c("title.basics.tsv.gz", "title.ratings.tsv.gz")  # The two datasets we want to download
# Set up output directory
out_dir <- "data/imdb"              # Folder to store the downloaded files
dir_create(out_dir)                 # Create the directory if it doesn't already exist
# Download IMDb files if not already present locally
for (f in files) {
dest <- file.path(out_dir, f)           # Full local path for each file
if (!file_exists(dest)) {               # Only download if file is missing
download.file(paste0(base_url, f),    # Construct the full URL
destfile = dest,                      # Where to save it locally
mode = "wb",                          # Write in binary mode (important for .gz files)
quiet = TRUE)                         # Suppress download messages
}
}
# Load IMDb datasets into R
# fread() from data.table is used for fast reading of large .tsv files
basics   <- fread(file.path(out_dir, "title.basics.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
ratings  <- fread(file.path(out_dir, "title.ratings.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
install.packages("tinytex")
library(dplyr)
library(readr)
library(fs)
library(data.table)
library(R.utils)
library(stringr)
library(tinytex)
library(ggplot2)
library(forcats)
library(tidyr)
base_url <- "https://datasets.imdbws.com/"                 # Base URL for IMDb datasets
files <- c("title.basics.tsv.gz", "title.ratings.tsv.gz")  # The two datasets we want to download
# Set up output directory
out_dir <- "data/imdb"              # Folder to store the downloaded files
dir_create(out_dir)                 # Create the directory if it doesn't already exist
# Download IMDb files if not already present locally
for (f in files) {
dest <- file.path(out_dir, f)           # Full local path for each file
if (!file_exists(dest)) {               # Only download if file is missing
download.file(paste0(base_url, f),    # Construct the full URL
destfile = dest,                      # Where to save it locally
mode = "wb",                          # Write in binary mode (important for .gz files)
quiet = TRUE)                         # Suppress download messages
}
}
# Load IMDb datasets into R
# fread() from data.table is used for fast reading of large .tsv files
basics   <- fread(file.path(out_dir, "title.basics.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
ratings  <- fread(file.path(out_dir, "title.ratings.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
basics <- basics %>%
select(
tconst,           # Unique title identifier (key for merging)
titleType,        # Type of the title (movie, short, tvSeries, etc.)
primaryTitle,     # Main title
startYear,        # Release year
runtimeMinutes,   # Duration in minutes
genres            # List of genres
) %>%
filter(
titleType == "movie",          # Keep only feature films
startYear >= 2011,             # Released from 2011 onwards
startYear <= 2020              # Up to 2020
)
View(basics)
merged_df <- merge(basics, ratings, by = "tconst")
# Creating New Columns for Better Analysis
merged_df$runtime_missing <- is.na(merged_df$runtimeMinutes)
merged_df$log10_numVotes <- log10(merged_df$numVotes)
merged_df <- merged_df %>%
mutate(Runtime10 = (runtimeMinutes - mean(runtimeMinutes, na.rm = TRUE)) / 10)
# Filtering 3 Selected Genres, RunTime and Number of Votes
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy") |
str_detect(genres, "Action") |
str_detect(genres, "Adventure")) %>%
filter(is.na(runtimeMinutes) |
runtimeMinutes >= 30) %>%           # Keep NA run times, exclude very short films
filter(numVotes >= 50)                       # Keep NA and films with few votes
# Impute missing runtimes by Genre x YearGroup
merged_df <- merged_df %>%
mutate(
year_group = case_when(
startYear >= 2011 & startYear <= 2015 ~ "2011-2015",
startYear >= 2016 & startYear <= 2020 ~ "2016-2020"
)
) %>%
group_by(genres, year_group) %>%
mutate(runtimeMinutes = if_else(
is.na(runtimeMinutes),
median(runtimeMinutes, na.rm = TRUE),
runtimeMinutes
)) %>%
ungroup()
View(merged_df)
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
basics <- basics %>%
select(
tconst,           # Unique title identifier (key for merging)
titleType,        # Type of the title (movie, short, tvSeries, etc.)
primaryTitle,     # Main title
startYear,        # Release year
runtimeMinutes,   # Duration in minutes
genres            # List of genres
) %>%
filter(
titleType == "movie",          # Keep only feature films
startYear >= 2011,             # Released from 2011 onwards
startYear <= 2020              # Up to 2020
)
merged_df <- merge(basics, ratings, by = "tconst")
merged_df <- merged_df %>%
mutate(
runtime_missing = is.na(runtimeMinutes),
log10_numVotes = log10(numVotes)
)
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy") |
str_detect(genres, "Action") |
str_detect(genres, "Adventure")) %>%
filter(is.na(runtimeMinutes) |
runtimeMinutes >= 30) %>%           # Keep NA run times, exclude very short films
filter(numVotes >= 50)                       # Keep NA and films with few votes
merged_df <- merged_df %>%
mutate(
year_group = case_when(
startYear >= 2011 & startYear <= 2015 ~ "2011-2015",
startYear >= 2016 & startYear <= 2020 ~ "2016-2020"
)
) %>%
group_by(genres, year_group) %>%
mutate(runtimeMinutes = if_else(
is.na(runtimeMinutes),
median(runtimeMinutes, na.rm = TRUE),
runtimeMinutes
)) %>%
ungroup()
# Compute RunTime 10 for Analysis
merged_df <- merged_df %>%
mutate(Runtime10 = (runtimeMinutes_imputed - mean(runtimeMinutes_imputed, na.rm = TRUE)) / 10)
merged_df <- merged_df %>%
mutate(
year_group = case_when(
startYear >= 2011 & startYear <= 2015 ~ "2011-2015",
startYear >= 2016 & startYear <= 2020 ~ "2016-2020"
)
) %>%
group_by(genres, year_group) %>%
mutate(runtimeMinutes_imputed = if_else(
is.na(runtimeMinutes),
median(runtimeMinutes, na.rm = TRUE),
runtimeMinutes
)) %>%
ungroup()
# Compute RunTime 10 for Analysis
merged_df <- merged_df %>%
mutate(Runtime10 = (runtimeMinutes_imputed - mean(runtimeMinutes_imputed, na.rm = TRUE)) / 10)
View(merged_df)
merged_df <- merged_df %>%
mutate(Runtime10 = (runtimeMinutes_imputed - mean(runtimeMinutes_imputed, na.rm = TRUE)) / 10)
merged_df <- merged_df %>%
select(-runtimeMinutes)
View(merged_df)
merged_df <- merge(basics, ratings, by = "tconst")
merged_df <- merged_df %>%
mutate(
runtime_missing = is.na(runtimeMinutes),
log10_numVotes = log10(numVotes)
)
merged_df <- merged_df %>%
mutate(
runtime_missing = is.na(runtimeMinutes),
log10_numVotes = log10(numVotes)
)
library(dplyr)
library(readr)
library(fs)
library(data.table)
library(R.utils)
library(stringr)
library(tinytex)
library(ggplot2)
library(forcats)
library(tidyr)
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
basics <- basics %>%
select(
tconst,           # Unique title identifier (key for merging)
titleType,        # Type of the title (movie, short, tvSeries, etc.)
primaryTitle,     # Main title
startYear,        # Release year
runtimeMinutes,   # Duration in minutes
genres            # List of genres
) %>%
filter(
titleType == "movie",          # Keep only feature films
startYear >= 2011,             # Released from 2011 onwards
startYear <= 2020              # Up to 2020
)
merged_df <- merge(basics, ratings, by = "tconst")
# Creating New Columns for Better Analysis
merged_df <- merged_df %>%
mutate(
runtime_missing = is.na(runtimeMinutes),
log10_numVotes = log10(numVotes)
)
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy") |
str_detect(genres, "Action") |
str_detect(genres, "Adventure")) %>%
filter(is.na(runtimeMinutes) |
runtimeMinutes >= 30) %>%           # Keep NA run times, exclude very short films
filter(numVotes >= 50)
merged_df <- merged_df %>%
mutate(
year_group = case_when(
startYear >= 2011 & startYear <= 2015 ~ "2011-2015",
startYear >= 2016 & startYear <= 2020 ~ "2016-2020"
)
) %>%
group_by(genres, year_group) %>%
mutate(runtimeMinutes_imputed = if_else(
is.na(runtimeMinutes),
median(runtimeMinutes, na.rm = TRUE),
runtimeMinutes
)) %>%
ungroup()
merged_df <- merged_df %>%
mutate(Runtime10 = (runtimeMinutes_imputed - mean(runtimeMinutes_imputed, na.rm = TRUE)) / 10)
View(merged_df)
summary(ratings)
summary(basics)
str(ratings)
str(basics)
sum(is.na(basics$runtimeMinutes))                                #Count how many NAs there are
mean(is.na(basics$runtimeMinutes))
basics$runtime_missing <- is.na(basics$runtimeMinutes)
table(basics$runtime_missing)
basics_long <- basics %>%
separate_rows(genres, sep = ",") %>%
mutate(runtime_missing = is.na(runtimeMinutes))
# Step 2: Collapse to top 10 genres (rest -> "Other")
basics_long <- basics_long %>%
mutate(genres = fct_lump(genres, n = 10))
ggplot(basics, aes(x = startYear, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of missing runtimes by release year",
y = "Proportion")
ggplot(basics_long, aes(x = genres, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of Missing Runtimes by Top 10 Genres",
x = "Genre",
y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
merged_df %>%
mutate(vote_bin = cut(numVotes,
breaks = c(0, 100, 1000, 10000, 100000, Inf),
labels = c("0–100", "101–1k", "1k–10k", "10k–100k", "100k+"))) %>%
ggplot(aes(x = vote_bin, fill = is.na(runtimeMinutes))) +
geom_bar(position = "fill") +
labs(title = "Proportion of Missing Runtimes by Vote Category",
x = "Vote Category",
y = "Proportion")
ggplot(merged_df, aes(x = averageRating, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of missing runtimes by Average Rating",
y = "Proportion")
chisq.test(table(basics$startYear, basics$runtime_missing))
chisq.test(table(basics_long$genres, basics_long$runtime_missing))
library(dplyr)
library(stringr)
library(readr)
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
basics <- basics %>%
select(
tconst,           # Unique title identifier (key for merging)
titleType,        # Type of the title (movie, short, tvSeries, etc.)
primaryTitle,     # Main title
startYear,        # Release year
runtimeMinutes,   # Duration in minutes
genres            # List of genres
) %>%
filter(
titleType == "movie",          # Keep only feature films
startYear >= 2011,             # Released from 2011 onwards
startYear <= 2020              # Up to 2020
)
merged_df <- merge(basics, ratings, by = "tconst")
merged_df <- merged_df %>%
mutate(
runtime_missing = is.na(runtimeMinutes),
log10_numVotes = log10(numVotes)
)
View(merged_df)
merged_df <- merged_df %>%
filter(str_detect(genres, "Comedy|Adventure|Action")) %>%
filter(is.na(runtimeMinutes) |
runtimeMinutes >= 30) %>%      # Keep NA run times, exclude very short films
filter(numVotes >= 50) %>%              # Keep NA and films with few votes
# Take the FIRST occurrence of one of the target genres in the string
mutate(
Genre = str_extract(genres, "Comedy|Adventure|Action"),
Genre = factor(Genre, levels = c("Comedy","Adventure","Action")))
merged_df <- merged_df %>%
mutate(
year_group = case_when(
startYear >= 2011 & startYear <= 2015 ~ "2011-2015",
startYear >= 2016 & startYear <= 2020 ~ "2016-2020"
)
) %>%
group_by(genres, year_group) %>%
mutate(runtimeMinutes_imputed = if_else(
is.na(runtimeMinutes),
median(runtimeMinutes, na.rm = TRUE),
runtimeMinutes
)) %>%
ungroup()
merged_df <- merged_df %>%
mutate(Runtime10 = (runtimeMinutes_imputed - mean(runtimeMinutes_imputed, na.rm = TRUE)) / 10)
###SAVING FINAL MERGED DATASET FOR ANALYSIS
write_csv(merged_df, "final_dataset.csv")
