```{r}
```{r}
install.packages("dplyr")
install.packages("readr")
install.packages("fs")
install.packages("data.table")
install.packages("R.utils")
install.packages("stringr")
library(dplyr)
library(readr)
library(fs)
library(data.table)
library(R.utils)
library(stringr)
Data Pulling Script
base_url <- "https://datasets.imdbws.com/"
files <- c("title.basics.tsv.gz", "title.ratings.tsv.gz")
out_dir <- "data/imdb"
dir_create(out_dir)
for (f in files) {
dest <- file.path(out_dir, f)
if (!file_exists(dest)) {
download.file(paste0(base_url, f), destfile = dest, mode = "wb", quiet = TRUE)
}
}
basics   <- fread(file.path(out_dir, "title.basics.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
ratings  <- fread(file.path(out_dir, "title.ratings.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
```
summary(ratings)
summary(basics)
str(ratings)
str(basics)
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
ratings <- ratings %>% select(tconst,averageRating,numVotes)
basics <- basics %>% select(tconst,titleType,primaryTitle,startYear,runtimeMinutes, genres) %>% filter(titleType =="movie", startYear >= 2011, startYear <= 2020, !is.na(runtimeMinutes))
merged_df <- merge(basics, ratings, by = "tconst")
merged_df <- merged_df %>%  filter((str_detect(merged_df$genres,"Comedy")) | (str_detect(merged_df$genres,"Action")) |(str_detect(merged_df$genres,"Adventure"))) %>% filter(runtimeMinutes >=30) %>% filter(numVotes >=50)
View(basics)
View(merged_df)
View(ratings)
setwd("~/Desktop/2025-2026/R working directory Victor van Rossum")
setwd("~/Desktop/R working directory Victor van Rossum")
library(readr)
library(data.table)
sat <- read_csv("sat.csv")
setDT(sat)
View(sat)
summary(sat)
View(sat)
sat[, child := num.child>0]
library(ggplot2)
ggplot(sat, aes(x=wait, y=overall)) + geom_point()
sat_lm1 <- lm(overall ~ child, sat); summary(sat_lm1)
sat_lm2 <- lm(overall ~ wait, sat); summary(sat_lm2)
sat_lm3 <- lm(overall ~ child+wait, sat); summary(sat_lm3)
library(car)
vif(sat_lm3)
sat_lm3$coef[[2]]
install.packages("broom")
library(broom)
sat_res3 <- augment(sat_lm3)
ggplot(sat_res3, aes(.resid)) + geom_histogram(aes(y = after_stat(density)), binwidth = 5) + stat_function(fun = dnorm, args = list(mean = mean(sat_res3$.resid), sd = sd(sat_res3$.resid)), color="red", linewidth=1)
plot(sat_lm3, which=1)
sat <- read_csv("cust.csv")
setDT(cust)
cust <- read_csv("cust.csv")
setDT(cust)
View(cust)
summary(cust)
sat <- read_csv("sat.csv")
cust <- read_csv("cust.csv")
setDT(cust)
View(cust)
summary(cust)
set.seed(90)
cust <- cust[sample.int(nrow(cust),2250),]
cust_lm1 <- lm(online.visits ~ email + age, data = cust)
cust_lm1 <- lm(online.visits ~ email + age); summary(cust_lm1)
cust_lm1 <- lm(online.visits ~ email + age); summary(cust_lm1)
cust <- read_csv("cust.csv")
setDT(cust)
View(cust)
summary(cust)
set.seed(90)
cust <- cust[sample.int(nrow(cust),2250),]
cust_lm1 <- lm(online.visits ~ email + age); summary(cust_lm1)
names(cust)
cust_lm1 <- lm(`online.visits` ~ email + age, data = cust)
summary(cust_lm1)
cust_lm1 <- lm(`online.visits` ~ email + age, data = cust) summary(cust_lm1)
cust_lm1 <- lm(`online.visits` ~ email + age, data = cust); summary(cust_lm1)
cust_lm1 <- lm(`online.visits` ~ email + age); summary(cust_lm1)
cust_lm1 <- lm(`online.visits` ~ email + age, data = cust); summary(cust_lm1)
new_obs <- data.frame(email = "yes", age = 31)
predict(cust_lm1, newdata = new_obs)
library(dplyr)
library(readr)
library(fs)
library(data.table)
library(R.utils)
library(stringr)
# Set up base URL and file list
base_url <- "https://datasets.imdbws.com/"   # Base URL for IMDb datasets
files <- c("title.basics.tsv.gz", "title.ratings.tsv.gz") # The two datasets we want to download
# Set up output directory
out_dir <- "data/imdb" # Folder to store the downloaded files
dir_create(out_dir) # Create the directory if it doesn't already exist
# Download IMDb files if not already present locally ---
for (f in files) {
dest <- file.path(out_dir, f)  # Full local path for each file
if (!file_exists(dest)) {  # Only download if file is missing
download.file(paste0(base_url, f), # Construct the full URL
destfile = dest,  # Where to save it locally
mode = "wb", # Write in binary mode (important for .gz files)
quiet = TRUE) # Suppress download messages
}
}
# Load IMDb datasets into R
# fread() from data.table is used for fast reading of large .tsv files
basics   <- fread(file.path(out_dir, "title.basics.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
ratings  <- fread(file.path(out_dir, "title.ratings.tsv.gz"),
sep = "\t", na.strings = "\\N", quote = "")
#Quick exploration of the datasets
summary(ratings)
summary(basics)
str(ratings)
str(basics)
# Convert columns stored as character to numeric for easier analysis
basics$startYear <- as.numeric(basics$startYear)
basics$runtimeMinutes <- as.numeric(basics$runtimeMinutes)
# Select only the relevant columns from basics dataset
basics <- basics %>% select(tconst, # Unique title identifier (key for merging)
titleType,  # Type of the title (movie, short, tvSeries, etc.)
primaryTitle, # Main title
startYear,  # Release year
runtimeMinutes, # Duration in minutes
genres # List of genres
)%>% filter(titleType =="movie", # Keep only feature films
startYear >= 2011, startYear <= 2020, # Released from 2011 onwards up to 2020
!is.na(runtimeMinutes)) # Exclude entries with missing runtime
# Merge basics and ratings datasets on the common key "tconst"
merged_df <- merge(basics, ratings, by = "tconst")
# Filter merged dataset for analysis
merged_df <- merged_df %>%  filter((str_detect(merged_df$genres,"Comedy")) | (str_detect(merged_df$genres,"Action")) |(str_detect(merged_df$genres,"Adventure"))  # Keep movies that belong to at least one of the target genres
) %>%  filter(runtimeMinutes >=30 # Exclude very short films
) %>% filter(numVotes >=50) # Keep only movies with enough votes (reliable ratings)
View(basics)
View(ratings)
View(merged_df)
git pull
git pull
git pull
df$LogVotes <- log10(df$NumVotes)
class(df)
votes_df <- read.csv("your_file.csv")   # or however you created it
votes_df <- read.csv("merged_df")   # or however you created it
votes_df <- read.csv("merged_df")   # or however you created it
votes_df$LogVotes <- log10(votes_df$NumVotes)
votes_df <- read.csv("merged_df")   # or however you created it
votes_df$LogVotes <- log10(votes_df$NumVotes)
num_Votes$LogVotes <- log10(votes_df$num_Votes)
num_Votes$LogVotes <- log10(num_Votes$num_Votes)
numVotes$LogVotes <- log10(numVotes$numVotes)
df$LogVotes <- log10(df$numVotes)
numVotes$LogVotes <- log10(numVotes$numVotes)
#Count how many NAs there are
sum(is.na(basics$runtimeMinutes))
mean(is.na(basics$runtimeMinutes))  # proportion of missing values
#Compare distributions (movies with vs. without runtimeMinutes)
basics$runtime_missing <- is.na(basics$runtimeMinutes)
table(basics$runtime_missing)
#Check if NAs are more common for certain years, title types, or genres:
library(ggplot2)
library(forcats)
library(tidyr)
#Check if NAs are related to popularity (ratings dataset)
# Step 1: Split multi-genre strings into separate rows
basics_long <- basics %>%
separate_rows(genres, sep = ",") %>%
mutate(runtime_missing = is.na(runtimeMinutes))
# Step 2: Collapse to top 10 genres (rest -> "Other")
basics_long <- basics_long %>%
mutate(genres = fct_lump(genres, n = 10))
# Merge basics and ratings datasets on the common key "tconst"
merged_df <- merge(basics, ratings, by = "tconst")
merged_df$runtime_missing <- is.na(merged_df$runtimeMinutes)
#Run all of the plots at once to view them side by side
ggplot(basics, aes(x = startYear, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of missing runtimes by release year",
y = "Proportion")
ggplot(basics_long, aes(x = genres, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of Missing Runtimes by Top 10 Genres",
x = "Genre",
y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
merged_df %>%
mutate(vote_bin = cut(numVotes,
breaks = c(0, 100, 1000, 10000, 100000, Inf),
labels = c("0–100", "101–1k", "1k–10k", "10k–100k", "100k+"))) %>%
ggplot(aes(x = vote_bin, fill = is.na(runtimeMinutes))) +
geom_bar(position = "fill") +
labs(title = "Proportion of Missing Runtimes by Vote Category",
x = "Vote Category",
y = "Proportion")
ggplot(merged_df, aes(x = averageRating, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of missing runtimes by Average Rating",
y = "Proportion")
merged_df$log10_numVotes <- log10(merged_df$numVotes)
#Statistical test of missing patterns
chisq.test(table(basics$startYear, basics$runtime_missing))
chisq.test(table(basics_long$genres, basics_long$runtime_missing))
# Merge basics and ratings datasets on the common key "tconst"
merged_df <- merge(basics, ratings, by = "tconst")
# Filter merged dataset for analysis
merged_df <- merged_df %>%  filter((str_detect(merged_df$genres,"Comedy")) | (str_detect(merged_df$genres,"Action")) |(str_detect(merged_df$genres,"Adventure"))  # Keep movies that belong to at least one of the target genres
) %>%  filter(runtimeMinutes >=30 # Exclude very short films
) %>% filter(numVotes >=50) # Keep only movies with enough votes (reliable ratings)
#Count how many NAs there are
sum(is.na(basics$runtimeMinutes))
mean(is.na(basics$runtimeMinutes))  # proportion of missing values
#Compare distributions (movies with vs. without runtimeMinutes)
basics$runtime_missing <- is.na(basics$runtimeMinutes)
table(basics$runtime_missing)
#Check if NAs are more common for certain years, title types, or genres:
library(ggplot2)
library(forcats)
library(tidyr)
#Check if NAs are related to popularity (ratings dataset)
# Step 1: Split multi-genre strings into separate rows
basics_long <- basics %>%
separate_rows(genres, sep = ",") %>%
mutate(runtime_missing = is.na(runtimeMinutes))
# Step 2: Collapse to top 10 genres (rest -> "Other")
basics_long <- basics_long %>%
mutate(genres = fct_lump(genres, n = 10))
# Merge basics and ratings datasets on the common key "tconst"
merged_df <- merge(basics, ratings, by = "tconst")
merged_df$runtime_missing <- is.na(merged_df$runtimeMinutes)
#Run all of the plots at once to view them side by side
ggplot(basics, aes(x = startYear, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of missing runtimes by release year",
y = "Proportion")
ggplot(basics_long, aes(x = genres, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of Missing Runtimes by Top 10 Genres",
x = "Genre",
y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
merged_df %>%
mutate(vote_bin = cut(numVotes,
breaks = c(0, 100, 1000, 10000, 100000, Inf),
labels = c("0–100", "101–1k", "1k–10k", "10k–100k", "100k+"))) %>%
ggplot(aes(x = vote_bin, fill = is.na(runtimeMinutes))) +
geom_bar(position = "fill") +
labs(title = "Proportion of Missing Runtimes by Vote Category",
x = "Vote Category",
y = "Proportion")
ggplot(merged_df, aes(x = averageRating, fill = runtime_missing)) +
geom_bar(position = "fill") +
labs(title = "Proportion of missing runtimes by Average Rating",
y = "Proportion")
merged_df$log10_numVotes <- log10(merged_df$numVotes)
#Statistical test of missing patterns
chisq.test(table(basics$startYear, basics$runtime_missing))
chisq.test(table(basics_long$genres, basics_long$runtime_missing))
